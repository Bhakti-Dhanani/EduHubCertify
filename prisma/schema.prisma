generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  email        String        @unique
  password     String
  name         String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  role         Role
  id           Int           @id @default(autoincrement())
  certificates Certificate[] @relation("CertificateUser")
  courses      Course[]      @relation("InstructorCourses")
  enrollments  Enrollment[]
  forumPosts   ForumPost[]   @relation("ForumPostUser")
}

model Course {
  title        String
  description  String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  thumbnail    String?
  id           Int           @id @default(autoincrement())
  instructorId Int
  assignments  Assignment[]  @relation("AssignmentCourse")
  certificates Certificate[]
  instructor   User          @relation("InstructorCourses", fields: [instructorId], references: [id])
  enrollments  Enrollment[]
  forumPosts   ForumPost[]
  modules      Module[]
}

model Module {
  title       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  id          Int      @id @default(autoincrement())
  courseId    Int
  description String
  lessons     Lesson[]
  course      Course   @relation(fields: [courseId], references: [id])
}

model Lesson {
  title     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  id        Int       @id @default(autoincrement())
  moduleId  Int
  duration  String
  document  Document?
  module    Module    @relation(fields: [moduleId], references: [id])
  pdf       PDF?
  quiz      Quiz?
  video     Video?
}

model Assignment {
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  id        Int      @id @default(autoincrement())
  courseId  Int
  course    Course   @relation("AssignmentCourse", fields: [courseId], references: [id])
}

model Certificate {
  issuedAt DateTime @default(now())
  id       Int      @id @default(autoincrement())
  userId   Int
  courseId Int
  course   Course   @relation(fields: [courseId], references: [id])
  user     User     @relation("CertificateUser", fields: [userId], references: [id])
}

model ForumPost {
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  id        Int      @id @default(autoincrement())
  userId    Int
  courseId  Int
  course    Course   @relation(fields: [courseId], references: [id])
  user      User     @relation("ForumPostUser", fields: [userId], references: [id])
}

model Enrollment {
  createdAt DateTime @default(now())
  id        Int      @id @default(autoincrement())
  userId    Int
  courseId  Int
  course    Course   @relation(fields: [courseId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Video {
  id       Int    @id @default(autoincrement())
  url      String
  lessonId Int    @unique
  lesson   Lesson @relation(fields: [lessonId], references: [id])
}

model PDF {
  id       Int    @id @default(autoincrement())
  url      String
  lessonId Int    @unique
  lesson   Lesson @relation(fields: [lessonId], references: [id])
}

model Document {
  id       Int    @id @default(autoincrement())
  url      String
  lessonId Int    @unique
  lesson   Lesson @relation(fields: [lessonId], references: [id])
}

model Quiz {
  id        Int    @id @default(autoincrement())
  questions Json
  lessonId  Int    @unique
  lesson    Lesson @relation(fields: [lessonId], references: [id])
}

enum Role {
  Student
  Instructor
}
